- 2 CRUDs;
- 1 funcionalidade de filtro ou busca;
- 1 funcionalidade de negócio;
- 1 funcionalidade que tenha relacionamento com duas entidades (pode ser um CRUD ou a própria funcionalidade de negócio);
- Navegação entre telas (modelo SPA);
- Login e tratamento de segurança com Token (JWT).
- A aplicação desenvolvida deverá contemplar alguns assuntos vistos em aula:
  componentes, data-binding, diretivas, injeção de dependência, filtros e modularização da aplicação.
- Outros frameworks e bibliotecas integrados à tecnologia utilizada podem (e são recomendados) a serem empregados no trabalho,
  tais como Bootstrap, ng-bootstrap MaterializeCSS, Angular Material, PrimeNG, etc.


Avaliação:
  Conceito C (acessando Web Services do Trabalho 1 OU arquitetura Serverless):
  - Apresentação de forma clara (para o professor);
  - CRUDs completos (pelo menos um por aluno) na aplicação com utilização de tabela e formulário;
  - Uma funcionalidade de filtro ou busca que evidencie o uso de Pipes;

  Conceito B (acessando Web Services do Trabalho 1 OU arquitetura Serverless):
  - Realizar as tarefas para alcançar o conceito C;
  - Realizar uma funcionalidade de negócio (ou CRUD) que manipule duas entidades simultaneamente na aplicação como um todo;
  - Utilização de Login, guardando o Token em LocalStorage e protegendo as rotas utilizando RouteGuard;
  - Utilização dos conceitos do Angular de maneira adequada (componentes, diretivas, rotas, etc);
  - Utilização de um sistema de controle de versão (ex: git) e de um ambiente de colaboração e gerenciamento de código baseado nesse controle de versão (ex: github, bitbucket). Caso o trabalho seja em dupla, a colaboração deve estar evidenciada;
  - Interface Web adequada e responsiva (sugere-se utilizar Bootstrap ou frameworks semelhantes);

  Conceito A (acessando Web Services do Trabalho 1 E arquitetura Serverless):
  - Aplicação completa, realizando todas as funcionalidades do conceito B com regras de negócio aplicadas corretamente;
  - Utilização de Web Services do Trabalho 1 E de Arquitetura Serverless para o back-end;
  - Validações de campos e na submissão dos dados via formulário;
  - Implantar a aplicação completa em uma plataforma em nuvem: Heroku, OpenShift, DigitalOcean, entre outros 


Apresentação e Entrega: 

A entrega deverá ser realizada pelo Blackboard da disciplina, anexando os projetos (front-end e back-end) em um arquivo zipado (zip), 
contendo o código fonte, o banco e todas as bibliotecas extras utilizadas (no package.json). 
Caso o grupo tenha utilizado o Github, deverá relacionar o link como comentário na entrega. 
Caso o grupo tenha implantado a aplicação, relacionar também o link da aplicação implantada no servidor.

Data de Entrega Final: 18/07